syntax = "proto3";

option java_multiple_files = true;
option java_package = "realworld.proto";
option java_outer_classname = "RealworldProto";

import 'google/api/annotations.proto';
import 'google/protobuf/empty.proto';
import 'google/protobuf/timestamp.proto';

package realworld.proto;

// The realworld service definition.
service RealworldService {
  /** === USER APIS === */
  rpc LoginUser(LoginRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/users/login"
      body: "*"
    };
  }

  rpc RegisterUser(RegisterRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/users"
      body: "*"
    };
  }

  rpc GetUser(google.protobuf.Empty) returns (UserResponse) {
    option (google.api.http) = {
      get: "/api/user"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      put: "/api/user"
      body: "*"
    };
  }

  /** === PROFILE APIS === */
  rpc GetProfile(GetProfileRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      get: "/api/profiles/{username=*}"
    };
  }

  rpc FollowProfile(FollowProfileRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      post: "/api/profiles/{username=*}/follow"
    };
  }

  rpc UnfollowProfile(UnfollowProfileRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      delete: "/api/profiles/{username=*}/follow"
    };
  }

  /** === ARTICLE APIS === */
  rpc ListArticles(ListArticlesRequest) returns (ArticlesResponse) {
    option (google.api.http) = {
      get: "/api/articles"
    };
  }
  
  rpc FeedArticles(FeedArticlesRequest) returns (ArticlesResponse) {
    option (google.api.http) = {
      get: "/api/articles/feed"
    };
  }

  rpc GetArticle(GetArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      get: "/api/articles/{slug=*}"
    };
  }

  rpc CreateArticle(CreateArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      post: "/api/articles"
      body: "*"
    };
  }

  rpc UpdateArticle(UpdateArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      put: "/api/articles/{slug=*}"
      body: "*"
    };
  }

  rpc DeleteArticle(DeleteArticleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/articles/{slug=*}"
    };
  }

  rpc FavoriteArticle(FavoriteArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      post: "/api/articles/{slug=*}/favorite"
    };
  }

  rpc UnfavoriteArticle(UnfavoriteArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      delete: "/api/articles/{slug=*}/favorite"
    };
  }

  rpc AddComment(AddCommentRequest) returns (CommentResponse) {
    option (google.api.http) = {
      post: "/api/articles/{slug=*}/comments"
      body: "*"
    };
  }

  rpc ListComments(ListCommentsRequest) returns (CommentsResponse) {
    option (google.api.http) = {
      get: "/api/articles/{slug=*}/comments"
    };
  }

  rpc DeleteComment(DeleteCommentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/articles/{slug=*}/comments/{id=*}"
    };
  }

  /** === TAG APIS === */
  rpc ListTags(google.protobuf.Empty) returns (TagsResponse) {
    option (google.api.http) = {
      get: "/api/tags"
    };
  }
}

/** === RESOURCES === */
message User {
  string email = 1;
  string username = 2;
  string bio = 3;
  string image = 4;
  string password = 5;
  string token = 6;
}

message Profile {
  string username = 1;
  string bio = 2;
  string image = 3;
  bool following = 4;
}

message Article {
  string slug = 1;
  string title = 2;
  string description = 3;
  string body = 4;
  repeated string tag_list = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  bool favorited = 8;
  int32 favorites_count = 9;
  Profile author = 10;
}

message Comment {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string body = 4;
  Profile author = 5;
}

/** === REQUESTS/RESPONSES === */
message LoginRequest {
  User user = 1;
}

message RegisterRequest {
  User user = 1;
}

message UpdateUserRequest {
  User user = 1;
}

message UserResponse {
  User user = 1;
}

message GetProfileRequest {
  string username = 1;
}

message FollowProfileRequest {
  string username = 1;
}

message UnfollowProfileRequest {
  string username = 1;
}

message ProfileResponse {
  Profile profile = 1;
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message FeedArticlesRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message ArticlesResponse {
  repeated Article articles = 1;
  int32 articles_count = 2;
}

message GetArticleRequest {
  string slug = 1;
}

message CreateArticleRequest {
  Article article = 1;
}

message UpdateArticleRequest {
  Article article = 1;
}

message DeleteArticleRequest {
  string slug = 1;
}

message FavoriteArticleRequest {
  string slug = 1;
}

message UnfavoriteArticleRequest {
  string slug = 1;
}

message ArticleResponse {
  Article article = 1;
}

message AddCommentRequest {
  string slug = 1;
  Comment comment = 2;
}

message CommentResponse {
  Comment comment = 1;
}

message ListCommentsRequest {
  string slug = 1;
}

message CommentsResponse {
  repeated Comment comments = 1;
}

message DeleteCommentRequest {
  string slug = 1;
  string id = 2;
}

message TagsResponse {
  repeated string tags = 1;
}
